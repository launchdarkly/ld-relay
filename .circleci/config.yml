version: 2.1

orbs:
  go: circleci/go@1.6.0

parameters:
  # See "Runtime platform versions" in CONTRIBUTING.md
  # We define go-release-version here as a pipeline parameter not because we intend to
  # override it in any parameterized builds, but just as a convenient shareable constant.
  go-release-version:
    type: string
    default: "1.20.7"

  # In addition to the most recent version of Go, we also support the previous version.
  go-previous-version:
    type: string
    default: "1.19.12"

  # We use a remote Docker host in some CI jobs that need to run Docker containers.
  # As of 2022-04-15, the default Docker daemon version was 17.09.0-ce, which started
  # consistently failing when we ran jobs with recent cimg/go images, possibly due to
  # an incompatibility with the Docker version in those images. The failure mode is as
  # described here: https://discuss.circleci.com/t/fail-to-build-images-with-docker-compose/43678
  remote-docker-version:
    type: string
    default: "20.10.12"

experimental:
  notify:
    branches:
      only:
        - v5
        - v6

workflows:
  workflow:
    jobs:
      - go-test:
          name: Go <<pipeline.parameters.go-release-version>>
          docker-image: cimg/go:<<pipeline.parameters.go-release-version>>
          run-lint: true
          test-coverage: true
      - go-test:
          name: Go <<pipeline.parameters.go-previous-version>>
          docker-image: cimg/go:<<pipeline.parameters.go-previous-version>>
      - benchmarks:
          docker-image: cimg/go:<<pipeline.parameters.go-release-version>>
      - integration-test
      - docker-images-test

  hourly-integration-test-stg:
    triggers:
    - schedule:
        cron: "0 * * * *"
        filters:
          branches:
            only: v7
    jobs:
      - integration-test
    when:
      equal: ["https://github.com/launchdarkly/ld-relay-private", <<pipeline.project.git_url>>]
  hourly-integration-test-prod:
    triggers:
    - schedule:
        cron: "0 * * * *"
        filters:
          branches:
            only: v7
    jobs:
      - integration-test:
          ld_api_url: https://app.launchdarkly.com
          ld_stream_url: https://stream.launchdarkly.com
          ld_sdk_url: https://sdk.launchdarkly.com
          ld_client_sdk_url: https://clientsdk.launchdarkly.com
          ld_api_token_env_var: LD_API_TOKEN_PROD
    when:
      equal: ["https://github.com/launchdarkly/ld-relay-private", <<pipeline.project.git_url>>]

  daily-package-build-test:
    triggers:
    - schedule:
        cron: "0 8 * * *"
        filters:
          branches:
            only: v7
    jobs:
      - package-build-test:
          name: package build - Go <<pipeline.parameters.go-release-version>>
          docker-image: cimg/go:<<pipeline.parameters.go-release-version>>
      - package-build-test:
          name: package build - Go <<pipeline.parameters.go-previous-version>>
          docker-image: cimg/go:<<pipeline.parameters.go-previous-version>>

  daily-security-scan:
    triggers:
    - schedule:
        cron: "0 12 * * *"
        filters:
          branches:
            only: v7
    jobs:
      - security-scan-of-current-build
      - security-scan-of-published-image

jobs:
  go-test:
    parameters:
      docker-image:
        type: string
      run-lint:
        type: boolean
        default: false
      test-coverage:
        type: boolean
        default: false
    
    docker:
      - image: <<parameters.docker-image>>
        environment: &environment
          CIRCLE_TEST_REPORTS: /tmp/circle-reports
          CIRCLE_ARTIFACTS: /tmp/circle-artifacts
          TAGS: redis_unit_tests,big_segment_external_store_tests
      - image: redis
      - image: amazon/dynamodb-local

    steps:
      - checkout
      - run: go version && go env
      - run:
          name: install go-junit-report
          command: go install github.com/jstemmer/go-junit-report/v2@v2.0.0
      - when:
          condition: <<parameters.run-lint>>
          steps:
            - run: make lint
      - run: |
          mkdir -p $CIRCLE_TEST_REPORTS
          mkdir -p $CIRCLE_ARTIFACTS
      - unless:
          condition: <<parameters.test-coverage>>
          steps:
            - run:
                name: Run tests
                command: make test | tee $CIRCLE_ARTIFACTS/report.txt  
            - run:
                name: Process test results
                command: go-junit-report < $CIRCLE_ARTIFACTS/report.txt > $CIRCLE_TEST_REPORTS/junit.xml
                when: always
      - when:
          condition: <<parameters.test-coverage>>
          steps:
            - run:
                name: Run tests with coverage
                command: make test-coverage
            - run:
                name: Store coverage results
                command: cp build/coverage* /tmp/circle-artifacts
                when: always
      - run:
          name: Run Prometheus endpoint test
          command: ./scripts/test-prometheus-endpoint.sh
      - store_test_results:
          path: /tmp/circle-reports
      - store_artifacts:
          path: /tmp/circle-artifacts

  integration-test:
    parameters:
      ld_api_url:
        type: string
        default: https://ld-stg.launchdarkly.com
      ld_stream_url:
        type: string
        default: https://stream-stg.launchdarkly.com
      ld_sdk_url:
        type: string
        default: https://sdk-stg.launchdarkly.com
      ld_client_sdk_url:
        type: string
        default: https://clientsdk-stg.launchdarkly.com
      ld_api_token_env_var:
        type: string
        default: LD_API_TOKEN_STG
    machine: # can't use regular Docker mode because we need to run our own Docker containers and share files with them
      image: ubuntu-2204:2023.04.2
      docker_layer_caching: true
    environment:
      LD_API_URL: <<parameters.ld_api_url>>
      LD_STREAM_URL: <<parameters.ld_stream_url>>
      LD_SDK_URL: <<parameters.ld_sdk_url>>
      LD_CLIENT_SDK_URL: <<parameters.ld_client_sdk_url>>
      CIRCLE_TEST_REPORTS: /tmp/circle-reports
      CIRCLE_ARTIFACTS: /tmp/circle-artifacts
    steps:
      - checkout
      - go/install: # since we're using machine mode, we can't use a preinstalled Go Docker image
          version: <<pipeline.parameters.go-release-version>>
          cache: false
      - run: go version && go env
      - go/load-cache
      - run:
          name: install go-junit-report
          command: go install github.com/jstemmer/go-junit-report@v0.9.1
      - run: go test -tags integrationtests -i ./integrationtests # just install the dependencies for the tests
      - go/save-cache
      - run: |
          mkdir -p $CIRCLE_TEST_REPORTS
          mkdir -p $CIRCLE_ARTIFACTS
      - run:
          name: Run integration tests
          command: LD_API_TOKEN=`echo $<<parameters.ld_api_token_env_var>>` make integration-test | tee $CIRCLE_ARTIFACTS/report.txt
      - run:
          name: Process test results
          command: go-junit-report < $CIRCLE_ARTIFACTS/report.txt > $CIRCLE_TEST_REPORTS/junit.xml
          when: always
      - store_test_results:
          path: /tmp/circle-reports
      - store_artifacts:
          path: /tmp/circle-artifacts

  # package-build-test verifies that it's possible to download and build Relay
  # in a single step from the command line, using "go install". It uses the latest
  # public release of Relay rather than whatever's in any particular branch, so we
  # don't need to check out the code as we would in most other CI jobs.
  package-build-test:
    parameters:
      docker-image:
        type: string
    docker:
      - image: <<parameters.docker-image>>
    steps:
      - run: go version
      - run: go install github.com/launchdarkly/ld-relay/v8@latest
      - run:
          name: verify that executable was built
          command: ls -l $GOPATH/bin/ld-relay

  benchmarks:
    parameters:
      docker-image:
        type: string
    
    docker:
      - image: <<parameters.docker-image>>

    steps:
      - checkout
      - run: go version && go env
      - run:
          name: Run benchmarks
          command: make benchmarks

  docker-images-test:
    docker:
      - image: cimg/go:<<pipeline.parameters.go-release-version>>
        environment:
          <<: *environment

    steps:
      - checkout
      - setup_remote_docker:  # start docker engine
          version: <<pipeline.parameters.remote-docker-version>>

      - run:
          name: verify Go and Alpine versions
          command: ./scripts/verify-release-versions.sh

      - run:
          name: add package source for Trivy
          command: |
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list

      - run:
          name: install packages
          command: |
            sudo apt-get update
            sudo apt-get install rpm trivy

      - run:
          name: build Docker images and run smoke test
          command: make docker-smoke-test

      - run:
          name: Trivy security scan
          command: trivy image --exit-code 1 launchdarkly/ld-relay:latest
          # Note that the "latest" here is not the latest published image in DockerHub;
          # it's the one that was just built locally in the previous step.

      - store_artifacts:
          path: dist/

  security-scan-of-current-build:
    docker:
      - image: cimg/go:<<pipeline.parameters.go-release-version>>
        environment:
          <<: *environment

    steps:
      - checkout
      - setup_remote_docker:  # start docker engine
          version: <<pipeline.parameters.remote-docker-version>>

      - run:
          name: add package source for Trivy
          command: |
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list

      - run:
          name: install packages
          command: |
            sudo apt-get update
            sudo apt-get install rpm trivy

      - run:
          name: build Docker images
          command: make products-for-release

      - run:
          name: Trivy security scan
          command: trivy image --exit-code 1 launchdarkly/ld-relay:latest
          # Note that the "latest" here is not the latest published image in DockerHub;
          # it's the one that was just built locally in the previous step.

  security-scan-of-published-image:
    docker:
      - image: cimg/go:<<pipeline.parameters.go-release-version>>
        environment:
          <<: *environment

    steps:
      - checkout
      - setup_remote_docker:  # start docker engine
          version: <<pipeline.parameters.remote-docker-version>>

      - run:
          name: add package source for Trivy
          command: |
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list

      - run:
          name: install packages
          command: |
            sudo apt-get update
            sudo apt-get install rpm trivy

      - run:
          name: Trivy security scan
          command: trivy image --exit-code 1 launchdarkly/ld-relay:latest
          # Here, because we did not locally rebuild the image, it is pulling the latest release
          # from DockerHub and re-scanning that (to detect any vulnerabilities that were reported
          # after the time of the release). This is important because, if our build installs the
          # latest versions of things at the time that the build happens, a fresh build might be
          # getting patches that the released version did not have.
