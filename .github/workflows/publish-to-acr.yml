# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  pull_request:
    branches:
     - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.2.0
        with:
          fetch-depth: '0'
          submodules: 'true'

      - name: Read VERSION file
        id: getversion
        run: echo "version=$([[ $(cat ./ld-relay/relay/version/version.go | grep  'Version = ') =~ [0-9]+\.[0-9]+\.[0-9]+ ]]  && echo $BASH_REMATCH)" >> $GITHUB_OUTPUT

      - name: Determine pre-release version tag
        id: getPreReleaseTag
        shell: pwsh
        env:
          PULL_REQUEST_REF: ${{ github.event.pull_request.head.ref }}
          PULL_REQUEST_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          if ($env:GITHUB_REF_NAME -eq "main") {
            $tag = ""
            Write-Output "main branch - no pre-release tag"
          } else {
            Write-Output "PULL_REQUEST_REF: $($env:PULL_REQUEST_REF)"
            Write-Output "PULL_REQUEST_SHA: $($env:PULL_REQUEST_SHA)"

            $tag = "-$($env:GITHUB_REF_NAME.Replace('/', '-'))-$($env:GITHUB_SHA.Substring(0,7))"
            Write-Output "GITHUB_REF_NAME '$($env:GITHUB_REF_NAME)' results in the pre-release tag of '$tag'"
          }

          Write-Output "preReleaseTag=$tag" >> $env:GITHUB_OUTPUT

      - name: ACR Build
        uses: ./.github/actions/acr-build
        id: acr-build
        with:
           repo: r1/toggles/ld-relay
           imageTag: ${{ steps.getversion.outputs.version }}${{ steps .getPreReleaseTag.outputs.preReleaseTag}}
        env:
           CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

