name: Publish Artifacts
description: 'Publish artifacts to Github Release'
inputs:
  token:
    description: 'Token to use for publishing.'
    required: true
  dry-run:
    description: 'Is this a dry run. If so no package will be published.'
    required: false
    default: 'true'
  tag:
    description: 'Tag to upload artifacts to.'
    required: true
outputs:
  hashes: 
    description: sha256sum hashes of built artifacts 
    value: ${{ steps.binary.outputs.hashes }}
  image: 
    description: built docker image names
    value: ${{ steps.image.outputs.name }}
  digest: 
    description: built docker image digests 
    value: ${{ steps.image.outputs.digest }}

runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64/v8,linux/arm/v7,linux/386
    - name: Git clean
      shell: bash
      run: git clean -f
    - name: Login to Docker
      shell: bash
      run: |
        echo $DOCKER_TOKEN | docker login --username $DOCKER_USERNAME --password-stdin
    - name: Run Goreleaser
      id: goreleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        version: latest
        args: release --clean ${{ inputs.dry-run == 'true' && '--skip=publish' || '' }}
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
    - name: Generate binary hashes
      id: binary 
      shell: bash
      env: 
        ARTIFACTS: ${{ steps.goreleaser.outputs.artifacts }}
      run: |
        # Generate binary hashes
        set -euo pipefail

        checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
        echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"
    - name: Image digest 
      id: image 
      shell: bash
      env:
        ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
      run: |
        # Generate image digest
        set -euo pipefail
        image_and_digest=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Docker Manifest") | .path')
        image=$(echo "${image_and_digest}" | cut -d'@' -f1 | cut -d':' -f1)
        digest=$(echo "${image_and_digest}" | cut -d'@' -f2)
        { echo 'name<<END'; echo $image; echo END } >> "$GITHUB_OUTPUT"
        { echo 'digest<<END'; echo $digest; echo END } >> "$GITHUB_OUTPUT"

    - name: Upload Release Artifacts
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        gh release upload ${{ inputs.tag }} ./dist/*.deb ./dist/*.rpm ./dist/*.tar.gz ./dist/*.txt --clobber
